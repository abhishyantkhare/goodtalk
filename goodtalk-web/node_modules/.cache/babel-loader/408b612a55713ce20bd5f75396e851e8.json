{"ast":null,"code":"var _jsxFileName = \"/Users/planetexpress/Documents/Projects/Personal/goodtalk/goodtalk-web/src/components/videochat/videochat.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./videochat.css\";\nimport InviteAlert from \"../invitealert/invitealert\";\nimport { Stack } from \"grommet\";\n\nfunction VideoChat() {\n  useEffect(() => {\n    setupJitsi();\n  });\n  const location = useLocation();\n  const [showInviteAlert, setShowInviteAlert] = useState(true);\n\n  function setupJitsi() {\n    const domain = \"meet.jit.si\";\n    const config = {\n      TOOLBAR_BUTTONS: ['microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen', 'fodeviceselection', 'hangup', 'profile', 'chat', 'recording', 'livestreaming', 'etherpad', 'sharedvideo', 'settings', 'raisehand', 'videoquality', 'filmstrip', 'feedback', 'invite', 'stats', 'shortcuts', 'tileview', 'videobackgroundblur', 'download', 'help', 'mute-everyone']\n    };\n    const options = {\n      roomName: location.pathname,\n      height: \"100%\",\n      width: \"100%\",\n      parentNode: document.getElementById('jitsi-container'),\n      interfaceConfigOverwrite: config\n    };\n    const api = new window.JitsiMeetExternalAPI(domain, options);\n    const chatName = location.state.chatName;\n    api.executeCommand('subject', chatName);\n  }\n\n  return /*#__PURE__*/React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InviteAlert, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"jitsi-container\",\n    className: \"jitsi-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default VideoChat;","map":{"version":3,"sources":["/Users/planetexpress/Documents/Projects/Personal/goodtalk/goodtalk-web/src/components/videochat/videochat.js"],"names":["React","useEffect","useState","useLocation","InviteAlert","Stack","VideoChat","setupJitsi","location","showInviteAlert","setShowInviteAlert","domain","config","TOOLBAR_BUTTONS","options","roomName","pathname","height","width","parentNode","document","getElementById","interfaceConfigOverwrite","api","window","JitsiMeetExternalAPI","chatName","state","executeCommand"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAO,iBAAP;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,KAAT,QAAsB,SAAtB;;AAEA,SAASC,SAAT,GAAqB;AACnBL,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,UAAU;AACX,GAFQ,CAAT;AAGA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,IAAD,CAAtD;;AACA,WAASK,UAAT,GAAsB;AACpB,UAAMI,MAAM,GAAG,aAAf;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,eAAe,EAAE,CACf,YADe,EACD,QADC,EACS,gBADT,EAC2B,SAD3B,EACsC,YADtC,EAEf,mBAFe,EAEM,QAFN,EAEgB,SAFhB,EAE2B,MAF3B,EAEmC,WAFnC,EAGf,eAHe,EAGE,UAHF,EAGc,aAHd,EAG6B,UAH7B,EAGyC,WAHzC,EAIf,cAJe,EAIC,WAJD,EAIc,UAJd,EAI0B,QAJ1B,EAIoC,OAJpC,EAI6C,WAJ7C,EAKf,UALe,EAKH,qBALG,EAKoB,UALpB,EAKgC,MALhC,EAKwC,eALxC;AADJ,KAAf;AASA,UAAMC,OAAO,GAAG;AACdC,MAAAA,QAAQ,EAAEP,QAAQ,CAACQ,QADL;AAEdC,MAAAA,MAAM,EAAE,MAFM;AAGdC,MAAAA,KAAK,EAAE,MAHO;AAIdC,MAAAA,UAAU,EAAEC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAJE;AAKdC,MAAAA,wBAAwB,EAAEV;AALZ,KAAhB;AAQA,UAAMW,GAAG,GAAG,IAAIC,MAAM,CAACC,oBAAX,CAAgCd,MAAhC,EAAwCG,OAAxC,CAAZ;AACA,UAAMY,QAAQ,GAAGlB,QAAQ,CAACmB,KAAT,CAAeD,QAAhC;AACAH,IAAAA,GAAG,CAACK,cAAJ,CAAmB,SAAnB,EAA8BF,QAA9B;AAED;;AACD,sBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,SAAS,EAAC,iBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CADF;AAcD;;AAED,eAAepB,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { useLocation } from \"react-router-dom\"\nimport \"./videochat.css\"\nimport InviteAlert from \"../invitealert/invitealert\"\nimport { Stack } from \"grommet\"\n\nfunction VideoChat() {\n  useEffect(() => {\n    setupJitsi()\n  })\n  const location = useLocation()\n  const [showInviteAlert, setShowInviteAlert] = useState(true)\n  function setupJitsi() {\n    const domain = \"meet.jit.si\"\n    const config = {\n      TOOLBAR_BUTTONS: [\n        'microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',\n        'fodeviceselection', 'hangup', 'profile', 'chat', 'recording',\n        'livestreaming', 'etherpad', 'sharedvideo', 'settings', 'raisehand',\n        'videoquality', 'filmstrip', 'feedback', 'invite', 'stats', 'shortcuts',\n        'tileview', 'videobackgroundblur', 'download', 'help', 'mute-everyone'\n      ],\n    }\n    const options = {\n      roomName: location.pathname,\n      height: \"100%\",\n      width: \"100%\",\n      parentNode: document.getElementById('jitsi-container'),\n      interfaceConfigOverwrite: config,\n    }\n\n    const api = new window.JitsiMeetExternalAPI(domain, options);\n    const chatName = location.state.chatName\n    api.executeCommand('subject', chatName);\n\n  }\n  return (\n    <Stack>\n\n      <div className=\"container\">\n        <InviteAlert />\n      </div>\n      <div>\n        <div\n          id=\"jitsi-container\"\n          className=\"jitsi-container\"\n        />\n      </div>\n    </Stack>\n  )\n}\n\nexport default VideoChat;"]},"metadata":{},"sourceType":"module"}